#!/usr/bin/env python3
"""
Exemplo simples de uso do RAGAS Evaluator v2.
"""

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent / "src"))

def exemplo_basico():
    """Exemplo b√°sico de uso do avaliador."""
    try:
        from src.evaluation.ragas_evaluator import RAGASEvaluatorV2
        from src.core import DesmentAI
        
        print("üöÄ Exemplo de uso do RAGAS Evaluator v2")
        print("=" * 50)
        
        print("1Ô∏è‚É£ Inicializando avaliador...")
        evaluator = RAGASEvaluatorV2()
        print("   ‚úÖ Avaliador criado")
        
        print("2Ô∏è‚É£ Criando dataset de teste...")
        test_dataset = evaluator.create_test_dataset()
        print(f"   ‚úÖ Dataset criado com {len(test_dataset['question'])} perguntas")
        
        print("3Ô∏è‚É£ Perguntas do dataset:")
        for i, question in enumerate(test_dataset['question'][:3], 1):
            print(f"   {i}. {question}")
        print("   ...")
        
        print("4Ô∏è‚É£ Ground truth (primeiras 3):")
        for i, gt in enumerate(test_dataset['ground_truth'][:3], 1):
            print(f"   {i}. {gt[:80]}...")
        print("   ...")
        
        print("5Ô∏è‚É£ Inicializando DesmentAI...")
        desmentai = DesmentAI()
        
        if desmentai.is_initialized:
            print("   ‚úÖ DesmentAI inicializado com sucesso")
            
            print("6Ô∏è‚É£ Executando avalia√ß√£o r√°pida...")
            results = evaluator.evaluate_desmentai(desmentai, test_dataset)
            
            if results.get("success", True):
                summary = results.get("summary", {})
                print("   ‚úÖ Avalia√ß√£o conclu√≠da!")
                print(f"   üìä Pontua√ß√£o geral: {summary.get('overall_score', 0):.3f}")
                print(f"   üìà Melhor m√©trica: {summary.get('best_performing_metric', 'N/A')}")
                print(f"   üìâ Pior m√©trica: {summary.get('worst_performing_metric', 'N/A')}")
            else:
                print(f"   ‚ùå Erro: {results.get('error', 'Erro desconhecido')}")
        else:
            print(f"   ‚ùå DesmentAI n√£o inicializado: {desmentai.initialization_error}")
            print("   üí° Verifique se GEMINI_API_KEY est√° configurada no arquivo .env")
        
        print("\nüéâ Exemplo conclu√≠do!")
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üí° Instale as depend√™ncias: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Erro: {e}")


def exemplo_dataset_personalizado():
    """Exemplo com dataset personalizado."""
    try:
        from src.evaluation.ragas_evaluator import RAGASEvaluatorV2
        from datasets import Dataset
        
        print("üîß Exemplo com dataset personalizado")
        print("=" * 50)
        
        custom_data = {
            "question": [
                "O Bitcoin √© uma moeda digital?",
                "A intelig√™ncia artificial pode substituir m√©dicos?"
            ],
            "ground_truth": [
                "VERDADEIRO: O Bitcoin √© uma criptomoeda digital descentralizada criada em 2009.",
                "PARCIALMENTE VERDADEIRO: A IA pode auxiliar m√©dicos, mas n√£o substitu√≠-los completamente."
            ],
            "source": [
                "Whitepaper do Bitcoin (2009)",
                "Estudos de medicina e IA (2023)"
            ]
        }
        
        custom_dataset = Dataset.from_dict(custom_data)
        
        evaluator = RAGASEvaluatorV2()
        print(f"‚úÖ Dataset personalizado criado com {len(custom_dataset['question'])} perguntas")
        
        for i, question in enumerate(custom_dataset['question'], 1):
            print(f"   {i}. {question}")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")


if __name__ == "__main__":
    print("üéØ Escolha um exemplo:")
    print("1. Exemplo b√°sico")
    print("2. Dataset personalizado")
    
    escolha = input("Digite sua escolha (1 ou 2): ").strip()
    
    if escolha == "1":
        exemplo_basico()
    elif escolha == "2":
        exemplo_dataset_personalizado()
    else:
        print("‚ùå Escolha inv√°lida")